{"remainingRequest":"/Users/roberthaidari/Projects/new-demo-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/roberthaidari/Projects/new-demo-site/src/views/Dashboard.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/roberthaidari/Projects/new-demo-site/src/views/Dashboard.vue","mtime":1673387523481},{"path":"/Users/roberthaidari/Projects/new-demo-site/node_modules/css-loader/dist/cjs.js","mtime":1673387079014},{"path":"/Users/roberthaidari/Projects/new-demo-site/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1673387081095},{"path":"/Users/roberthaidari/Projects/new-demo-site/node_modules/postcss-loader/src/index.js","mtime":1673387079659},{"path":"/Users/roberthaidari/Projects/new-demo-site/node_modules/cache-loader/dist/cjs.js","mtime":1673387077606},{"path":"/Users/roberthaidari/Projects/new-demo-site/node_modules/vue-loader/lib/index.js","mtime":1673387080368}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5uby11cHBlcmNhc2UgewogIHRleHQtdHJhbnNmb3JtOiBub25lICFpbXBvcnRhbnQ7CiAgdGV4dC10cmFuc2Zvcm06IHVuc2V0ICFpbXBvcnRhbnQ7Cn0Kdi1kYXRhLXRhYmxlPi52LWRhdGEtdGFibGVfX3dyYXBwZXI+dGFibGU+dGJvZHk+dHI+dGQsIC52LWRhdGEtdGFibGU+LnYtZGF0YS10YWJsZV9fd3JhcHBlcj50YWJsZT50Zm9vdD50cj50ZCwgLnYtZGF0YS10YWJsZT4udi1kYXRhLXRhYmxlX193cmFwcGVyPnRhYmxlPnRoZWFkPnRyPnRkIHsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwogIG92ZXJmbG93OiBoaWRkZW47CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7Cn0K"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-main class=\"pt-0 fill-height\">\n    <v-container class=\"pa-0\" fluid fill-height>\n      <v-layout child-flex>\n      </v-layout>\n    </v-container>\n  </v-main>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\n\nexport default {\n  name: 'Dashboard',\n  components: {},\n  data: () => ({\n    dialog: false,\n    dialogDelete: false,\n    search: '',\n    messageTypes: [],\n    expanded: [],\n    metrics: [],\n    colors: ['#0D2E41', '#00798A', '#F8AF2C', '#C27691', '#D9734E', '#E09C4C', '#87D4F5', '#E09C4C'],\n    headers: [\n      { text: '', value: 'data-table-expand' },\n      {\n        text: 'First Name',\n        align: 'start',\n        sortable: true,\n        value: 'first_name',\n      },\n      {\n        text: 'Last Name',\n        align: 'start',\n        sortable: true,\n        value: 'last_name',\n      },\n      {\n        text: 'Email',\n        align: 'start',\n        width: 150,\n        sortable: true,\n        value: 'email',\n      },\n      {\n        text: 'Monthly Responses',\n        align: 'center',\n        width: 120,\n        sortable: true,\n        value: 'number_of_responses',\n      },\n      {\n        text: 'Last Response',\n        align: 'center',\n        width: 140,\n        sortable: true,\n        value: 'last_response',\n      },\n      {\n        text: 'Phone Number',\n        align: 'start',\n        sortable: true,\n        value: 'phone',\n      },\n      {\n        text: 'Patient Status',\n        align: 'center',\n        sortable: true,\n        value: 'patient_status',\n      },\n      {\n        text: 'Notification Status',\n        align: 'center',\n        sortable: true,\n        value: 'notification_status',\n      },\n      {\n        text: 'Metrics',\n        align: 'center',\n        sortable: true,\n        value: 'metrics',\n      },\n      { text: 'Actions', align: 'center', value: 'actions', sortable: false },\n    ],\n    items: [],\n    defaultItem: {\n      phone: '',\n      email: '',\n      patient_status: '',\n      notification_status: '',\n      metrics: [],\n      index: 0\n    },\n  }),\n  watch: {\n    dialog (val) {\n      val || this.close()\n    },\n    dialogDelete (val) {\n      val || this.close()\n    },\n  },\n  async created () {\n  },\n\n  methods: {\n    ...mapActions(['fetchAllPatients', 'fetchMessageTypes', 'fetchPatientData', 'fetchUserSettings']),\n    async initialize () {\n    },\n    close () {\n      this.dialog = false\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      })\n    },\n    addPatient (patient) {\n      this.items.unshift(patient)\n    },\n  },\n}\n</script>\n\n<style>\n  .no-uppercase {\n    text-transform: none !important;\n    text-transform: unset !important;\n  }\n  v-data-table>.v-data-table__wrapper>table>tbody>tr>td, .v-data-table>.v-data-table__wrapper>table>tfoot>tr>td, .v-data-table>.v-data-table__wrapper>table>thead>tr>td {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n</style>\n"]}]}